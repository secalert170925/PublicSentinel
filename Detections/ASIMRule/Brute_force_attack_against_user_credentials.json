{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/a743f0d5-61da-5709-ad4e-66c28c969aec')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/a743f0d5-61da-5709-ad4e-66c28c969aec')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2021-09-01-preview",
            "properties": {
                "displayName": "[Public]Brute force attack against user credentials (Uses Authentication Normalization)",
                "description": "Identifies evidence of brute force activity against a user highlighting multiple authentication failures \nand by a successful authentication within a given time window. \n(The query does not enforce any sequence - eg requiring the successful authentication to occur last.)\nDefault Failure count is 10, Default Success count is 1 and default Time Window is 20 minutes.\nTo use this analytics rule, make sure you have deployed the [ASIM normalization parsers](https://aka.ms/AzSentinelAuthentication)",
                "severity": "Medium",
                "enabled": true,
                "query": "let failureCountThreshold = 10;\nlet successCountThreshold = 1;\nlet authenticationWindow = 20m;\nimAuthentication\n| extend SrcDvcIpAddr = tostring(iff(isempty(SrcDvcIpAddr), iff(isnotempty(IPAddress), IPAddress, \"\"), SrcDvcIpAddr))\n| where TimeGenerated > ago(1h) and TimeGenerated < now()\n//\n//以下は個社チューニング\n//\n| join kind=leftouter _GetWatchlist('MyNetwork') on $left.SrcDvcIpAddr == $right.SearchKey\n| where Tags <> \" HomeNetwork\"\n//\n//ここまで\n//\n| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), IPAddress = make_set(SrcDvcIpAddr)\n    , FailureCount = countif(EventResult == 'Failure')\n    , SuccessCount = countif(EventResult == 'Success') \n    // might be improved by counting FailReason:Outdated as Success.\n    by\n    bin(TimeGenerated, authenticationWindow),\n    TargetUserId,\n    TargetUsername,\n    TargetUserType \n| where FailureCount >= failureCountThreshold and SuccessCount >= successCountThreshold\n| mv-expand IPAddress to typeof(string)",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "tactics": [
                    "CredentialAccess"
                ],
                "alertRuleTemplateName": "a6c435a2-b1a0-466d-b730-9f8af69262e8",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "TargetUsername"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPAddress"
                            }
                        ]
                    }
                ]
            }
        }
    ]
}